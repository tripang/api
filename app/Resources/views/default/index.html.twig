{% extends 'base.html.twig' %}

{% block body %}
    <h3>Получение списка пользователей по критерию (nick, login, email), GETзапрос</h3>
    например: ivan, petr
    <form id="search-form" action="/">
        <input name="search" placeholder="Введите ник логин или email" required />
        <input type="submit" value="Найти" />
    </form>
    <div id="search-rezult"></div>

    <h3>Получение пользователя по id, GETзапрос</h3>
    <ul id="idList">
    {% for user in users %}
        <a href="/">{{user.id}}</a>&nbsp;&nbsp;&nbsp;&nbsp;
    {% endfor %}
    </ul>

    <h3>Обновление пользователя (изменение ника, email), POSTзапрос</h3>
    <ul id="update">
    {% for user in users %}
        <li>
            <form id="{{user.id}}" action="">
                <input name="nick" value="{{user.nick}}" required />
                <input name="email" value="{{user.email}}" required />
                <input type="submit" value="Изменить" />
            </form
        </li>
    {% endfor %}
    </ul>

    <h3>Выбор типа возвращаемых данных (json или xml, по выбору клиентского приложения)</h3>

    <form id="api-form" action="/">
        <input type="submit" value="XML" />
        <input type="submit" value="JSON" />
    </form>
    <div id="api-rezult"></div>

    <h3>Доступ к API только авторизованному клиентскому приложению</h3>
    <div id="client" style="display: none">{{client}}</div>
    <a href="/api/user?search=ivan&client=300&type=xml">Неавторизованный клиент увидит ошибку</a>

    <h3>Кастомные страницы 404й и 500й ошибок</h3>
    <a href="/wrongpath">Кастомная страниц ошибок</a>

    <h3>Mеханизм переключения окружения (development, production)</h3>
    <p>В Symfony есть встроенное переключение окружения:
        <a href="/app.php">Production</a>&nbsp;&nbsp;&nbsp;&nbsp;<a href="/app_dev.php">Development</a>
    </p>

    <h3>Дополнительное задание</h3>
    <p><i>Представьте, что суточная нагрузка на приложение составит 5 000 000 хитов.
    Опишите предполагаемое окружение и необходимые сервисы,
    которые могут понадобиться, чтобы выдержать подобную нагрузку.</i></p>
    <p>Для снижения нагрузки можно двигаться в нескольких направлениях</p>
    <ol style="width: 500px"><li>Снижение количества хитов за счет кэширования на клиенте.
            HTML5 позволяет кэширование через манифест, данные можно хранить в LocalStorage.
            Для сложных структур можно воспользоваться IndexedDB.
            Таким образом часть нагрузки на сервер переносится на клиент.</li>
        <li>Снижение количества хитов за счет оптимизации api.
            Возможно, необходимо создать дополнительные методы для объединения групп хитов.
            Таким образом можно снизить объем данных для обмена
            и уменьшить количество запросов к базе данных путем укрупнения однотипных запросов.</li>
        <li>Снижение нагрузки на базу данных путем кэширование api-запросов на сервере.
            Как правило применяется&nbsp;Memcached, Redis.
            Для повышения эффективности необходимо проанализировать время кэширования всех данных.</li>
        <li>Оптимизация запросов к&nbsp;базы данных. Необходимо регулярно проверять
            все длительные запросы к базе. При разработка проекта
            можно только предполагать масштаб данных для хранения.
            Без внесения изменений время запросов будет неуклонно возрастать
            по мере увеличения базы данных.</li>
        <li>Снижение нагрузки на один конкретный сервер за счет создания системы распределенных серверов.</li>
    </ol>
{% endblock %}
